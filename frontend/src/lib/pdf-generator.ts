// PDF report generation using jsPDF
// This module creates detailed medical reports with diagnosis results

interface ReportData {
  patientInfo?: {
    name?: string;
    age?: number;
    gender?: string;
    date: string;
  };
  diagnosis: {
    disease: string;
    confidence: number;
    accuracy: number;
    processingTime: number;
  };
  imageUrl?: string;
  heatmapUrl?: string;
}

export async function generatePDFReport(data: ReportData): Promise<void> {
  try {
    // Dynamically import jsPDF to avoid SSR issues
    const { jsPDF } = await import('jspdf');
    
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    
    // Header
    doc.setFontSize(20);
    doc.setTextColor(37, 99, 235); // Medical blue
    doc.text('EyeAI Diagnosis Report', pageWidth / 2, 30, { align: 'center' });
    
    // Subtitle
    doc.setFontSize(12);
    doc.setTextColor(100);
    doc.text('Decentralized Federated Learning for Ocular Disease Diagnosis', pageWidth / 2, 40, { align: 'center' });
    
    // Date
    doc.setFontSize(10);
    doc.setTextColor(0);
    doc.text(`Report Generated: ${data.patientInfo?.date || new Date().toLocaleDateString()}`, 20, 60);
    
    // Diagnosis Results Section
    doc.setFontSize(16);
    doc.setTextColor(37, 99, 235);
    doc.text('Diagnosis Results', 20, 80);
    
    doc.setFontSize(12);
    doc.setTextColor(0);
    doc.text(`Predicted Condition: ${data.diagnosis.disease}`, 20, 95);
    doc.text(`Confidence Score: ${data.diagnosis.confidence.toFixed(1)}%`, 20, 105);
    doc.text(`Model Accuracy: ${data.diagnosis.accuracy.toFixed(1)}%`, 20, 115);
    doc.text(`Processing Time: ${data.diagnosis.processingTime.toFixed(2)}s`, 20, 125);
    
    // Privacy Notice
    doc.setFontSize(14);
    doc.setTextColor(16, 185, 129); // Success green
    doc.text('Privacy Protection', 20, 150);
    
    doc.setFontSize(10);
    doc.setTextColor(0);
    const privacyText = [
      'This diagnosis was performed entirely on your local device.',
      'No medical data was transmitted to external servers.',
      'Your privacy and data security are fully protected.',
    ];
    
    privacyText.forEach((line, index) => {
      doc.text(line, 20, 165 + (index * 10));
    });
    
    // Technical Details
    doc.setFontSize(14);
    doc.setTextColor(37, 99, 235);
    doc.text('Technical Details', 20, 200);
    
    doc.setFontSize(10);
    doc.setTextColor(0);
    const technicalDetails = [
      'Model Architecture: Swin Transformer',
      'Training Dataset: ODIR-5K',
      'Federated Learning Approach: Decentralized',
      'Inference Location: Client-side (Local Device)',
    ];
    
    technicalDetails.forEach((line, index) => {
      doc.text(line, 20, 215 + (index * 10));
    });
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(100);
    doc.text('Generated by EyeAI Diagnosis System', pageWidth / 2, pageHeight - 20, { align: 'center' });
    doc.text('Final Year Research Project - Computer Science Department', pageWidth / 2, pageHeight - 15, { align: 'center' });
    
    // Save the PDF
    doc.save(`EyeAI_Diagnosis_Report_${new Date().toISOString().split('T')[0]}.pdf`);
    
  } catch (error) {
    console.error('Failed to generate PDF report:', error);
    throw new Error('PDF generation failed');
  }
}

export default generatePDFReport;
